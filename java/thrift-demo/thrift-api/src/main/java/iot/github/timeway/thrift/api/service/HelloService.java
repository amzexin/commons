/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package iot.github.timeway.thrift.api.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2023-04-11")
public class HelloService {

  public interface Iface {

    /**
     * hello
     * 
     * @param str
     */
    public iot.github.timeway.thrift.api.bean.HelloDTO hello(java.lang.String str) throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException;

    /**
     * helloVoid
     * void，空类型，对应C/C++/java中的void类型；该类型主要用作函数的返回值，
     * 
     * @param str
     */
    public void helloVoid(java.lang.String str) throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void hello(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO> resultHandler) throws org.apache.thrift.TException;

    public void helloVoid(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public iot.github.timeway.thrift.api.bean.HelloDTO hello(java.lang.String str) throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException
    {
      send_hello(str);
      return recv_hello();
    }

    public void send_hello(java.lang.String str) throws org.apache.thrift.TException
    {
      hello_args args = new hello_args();
      args.setStr(str);
      sendBase("hello", args);
    }

    public iot.github.timeway.thrift.api.bean.HelloDTO recv_hello() throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException
    {
      hello_result result = new hello_result();
      receiveBase(result, "hello");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.helloException != null) {
        throw result.helloException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hello failed: unknown result");
    }

    public void helloVoid(java.lang.String str) throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException
    {
      send_helloVoid(str);
      recv_helloVoid();
    }

    public void send_helloVoid(java.lang.String str) throws org.apache.thrift.TException
    {
      helloVoid_args args = new helloVoid_args();
      args.setStr(str);
      sendBase("helloVoid", args);
    }

    public void recv_helloVoid() throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException
    {
      helloVoid_result result = new helloVoid_result();
      receiveBase(result, "helloVoid");
      if (result.helloException != null) {
        throw result.helloException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hello(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hello_call method_call = new hello_call(str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hello_call extends org.apache.thrift.async.TAsyncMethodCall<iot.github.timeway.thrift.api.bean.HelloDTO> {
      private java.lang.String str;
      public hello_call(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.str = str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hello", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hello_args args = new hello_args();
        args.setStr(str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public iot.github.timeway.thrift.api.bean.HelloDTO getResult() throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hello();
      }
    }

    public void helloVoid(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      helloVoid_call method_call = new helloVoid_call(str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class helloVoid_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String str;
      public helloVoid_call(java.lang.String str, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.str = str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("helloVoid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        helloVoid_args args = new helloVoid_args();
        args.setStr(str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws iot.github.timeway.thrift.api.exception.HelloException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("hello", new hello());
      processMap.put("helloVoid", new helloVoid());
      return processMap;
    }

    public static class hello<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hello_args> {
      public hello() {
        super("hello");
      }

      public hello_args getEmptyArgsInstance() {
        return new hello_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public hello_result getResult(I iface, hello_args args) throws org.apache.thrift.TException {
        hello_result result = new hello_result();
        try {
          result.success = iface.hello(args.str);
        } catch (iot.github.timeway.thrift.api.exception.HelloException helloException) {
          result.helloException = helloException;
        }
        return result;
      }
    }

    public static class helloVoid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, helloVoid_args> {
      public helloVoid() {
        super("helloVoid");
      }

      public helloVoid_args getEmptyArgsInstance() {
        return new helloVoid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public helloVoid_result getResult(I iface, helloVoid_args args) throws org.apache.thrift.TException {
        helloVoid_result result = new helloVoid_result();
        try {
          iface.helloVoid(args.str);
        } catch (iot.github.timeway.thrift.api.exception.HelloException helloException) {
          result.helloException = helloException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hello", new hello());
      processMap.put("helloVoid", new helloVoid());
      return processMap;
    }

    public static class hello<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hello_args, iot.github.timeway.thrift.api.bean.HelloDTO> {
      public hello() {
        super("hello");
      }

      public hello_args getEmptyArgsInstance() {
        return new hello_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO>() { 
          public void onComplete(iot.github.timeway.thrift.api.bean.HelloDTO o) {
            hello_result result = new hello_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hello_result result = new hello_result();
            if (e instanceof iot.github.timeway.thrift.api.exception.HelloException) {
              result.helloException = (iot.github.timeway.thrift.api.exception.HelloException) e;
              result.setHelloExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hello_args args, org.apache.thrift.async.AsyncMethodCallback<iot.github.timeway.thrift.api.bean.HelloDTO> resultHandler) throws org.apache.thrift.TException {
        iface.hello(args.str,resultHandler);
      }
    }

    public static class helloVoid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, helloVoid_args, Void> {
      public helloVoid() {
        super("helloVoid");
      }

      public helloVoid_args getEmptyArgsInstance() {
        return new helloVoid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            helloVoid_result result = new helloVoid_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            helloVoid_result result = new helloVoid_result();
            if (e instanceof iot.github.timeway.thrift.api.exception.HelloException) {
              result.helloException = (iot.github.timeway.thrift.api.exception.HelloException) e;
              result.setHelloExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, helloVoid_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.helloVoid(args.str,resultHandler);
      }
    }

  }

  public static class hello_args implements org.apache.thrift.TBase<hello_args, hello_args._Fields>, java.io.Serializable, Cloneable, Comparable<hello_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_args");

    private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hello_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hello_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR((short)1, "str");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR
            return STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_args.class, metaDataMap);
    }

    public hello_args() {
    }

    public hello_args(
      java.lang.String str)
    {
      this();
      this.str = str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_args(hello_args other) {
      if (other.isSetStr()) {
        this.str = other.str;
      }
    }

    public hello_args deepCopy() {
      return new hello_args(this);
    }

    @Override
    public void clear() {
      this.str = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStr() {
      return this.str;
    }

    public hello_args setStr(@org.apache.thrift.annotation.Nullable java.lang.String str) {
      this.str = str;
      return this;
    }

    public void unsetStr() {
      this.str = null;
    }

    /** Returns true if field str is set (has been assigned a value) and false otherwise */
    public boolean isSetStr() {
      return this.str != null;
    }

    public void setStrIsSet(boolean value) {
      if (!value) {
        this.str = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case STR:
        if (value == null) {
          unsetStr();
        } else {
          setStr((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR:
        return getStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR:
        return isSetStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_args)
        return this.equals((hello_args)that);
      return false;
    }

    public boolean equals(hello_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_str = true && this.isSetStr();
      boolean that_present_str = true && that.isSetStr();
      if (this_present_str || that_present_str) {
        if (!(this_present_str && that_present_str))
          return false;
        if (!this.str.equals(that.str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStr()) ? 131071 : 524287);
      if (isSetStr())
        hashCode = hashCode * 8191 + str.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hello_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hello_args(");
      boolean first = true;

      sb.append("str:");
      if (this.str == null) {
        sb.append("null");
      } else {
        sb.append(this.str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hello_argsStandardScheme getScheme() {
        return new hello_argsStandardScheme();
      }
    }

    private static class hello_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hello_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.str = iprot.readString();
                struct.setStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.str != null) {
          oprot.writeFieldBegin(STR_FIELD_DESC);
          oprot.writeString(struct.str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hello_argsTupleScheme getScheme() {
        return new hello_argsTupleScheme();
      }
    }

    private static class hello_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hello_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStr()) {
          oprot.writeString(struct.str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.str = iprot.readString();
          struct.setStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hello_result implements org.apache.thrift.TBase<hello_result, hello_result._Fields>, java.io.Serializable, Cloneable, Comparable<hello_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField HELLO_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("helloException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hello_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hello_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.bean.HelloDTO success; // required
    public @org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.exception.HelloException helloException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      HELLO_EXCEPTION((short)1, "helloException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // HELLO_EXCEPTION
            return HELLO_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, iot.github.timeway.thrift.api.bean.HelloDTO.class)));
      tmpMap.put(_Fields.HELLO_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("helloException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, iot.github.timeway.thrift.api.exception.HelloException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_result.class, metaDataMap);
    }

    public hello_result() {
    }

    public hello_result(
      iot.github.timeway.thrift.api.bean.HelloDTO success,
      iot.github.timeway.thrift.api.exception.HelloException helloException)
    {
      this();
      this.success = success;
      this.helloException = helloException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_result(hello_result other) {
      if (other.isSetSuccess()) {
        this.success = new iot.github.timeway.thrift.api.bean.HelloDTO(other.success);
      }
      if (other.isSetHelloException()) {
        this.helloException = new iot.github.timeway.thrift.api.exception.HelloException(other.helloException);
      }
    }

    public hello_result deepCopy() {
      return new hello_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.helloException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public iot.github.timeway.thrift.api.bean.HelloDTO getSuccess() {
      return this.success;
    }

    public hello_result setSuccess(@org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.bean.HelloDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public iot.github.timeway.thrift.api.exception.HelloException getHelloException() {
      return this.helloException;
    }

    public hello_result setHelloException(@org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.exception.HelloException helloException) {
      this.helloException = helloException;
      return this;
    }

    public void unsetHelloException() {
      this.helloException = null;
    }

    /** Returns true if field helloException is set (has been assigned a value) and false otherwise */
    public boolean isSetHelloException() {
      return this.helloException != null;
    }

    public void setHelloExceptionIsSet(boolean value) {
      if (!value) {
        this.helloException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((iot.github.timeway.thrift.api.bean.HelloDTO)value);
        }
        break;

      case HELLO_EXCEPTION:
        if (value == null) {
          unsetHelloException();
        } else {
          setHelloException((iot.github.timeway.thrift.api.exception.HelloException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case HELLO_EXCEPTION:
        return getHelloException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case HELLO_EXCEPTION:
        return isSetHelloException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_result)
        return this.equals((hello_result)that);
      return false;
    }

    public boolean equals(hello_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_helloException = true && this.isSetHelloException();
      boolean that_present_helloException = true && that.isSetHelloException();
      if (this_present_helloException || that_present_helloException) {
        if (!(this_present_helloException && that_present_helloException))
          return false;
        if (!this.helloException.equals(that.helloException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetHelloException()) ? 131071 : 524287);
      if (isSetHelloException())
        hashCode = hashCode * 8191 + helloException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hello_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHelloException()).compareTo(other.isSetHelloException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHelloException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloException, other.helloException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hello_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("helloException:");
      if (this.helloException == null) {
        sb.append("null");
      } else {
        sb.append(this.helloException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hello_resultStandardScheme getScheme() {
        return new hello_resultStandardScheme();
      }
    }

    private static class hello_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hello_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new iot.github.timeway.thrift.api.bean.HelloDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // HELLO_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.helloException = new iot.github.timeway.thrift.api.exception.HelloException();
                struct.helloException.read(iprot);
                struct.setHelloExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.helloException != null) {
          oprot.writeFieldBegin(HELLO_EXCEPTION_FIELD_DESC);
          struct.helloException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hello_resultTupleScheme getScheme() {
        return new hello_resultTupleScheme();
      }
    }

    private static class hello_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hello_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetHelloException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetHelloException()) {
          struct.helloException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new iot.github.timeway.thrift.api.bean.HelloDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.helloException = new iot.github.timeway.thrift.api.exception.HelloException();
          struct.helloException.read(iprot);
          struct.setHelloExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class helloVoid_args implements org.apache.thrift.TBase<helloVoid_args, helloVoid_args._Fields>, java.io.Serializable, Cloneable, Comparable<helloVoid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("helloVoid_args");

    private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new helloVoid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new helloVoid_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR((short)1, "str");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR
            return STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(helloVoid_args.class, metaDataMap);
    }

    public helloVoid_args() {
    }

    public helloVoid_args(
      java.lang.String str)
    {
      this();
      this.str = str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public helloVoid_args(helloVoid_args other) {
      if (other.isSetStr()) {
        this.str = other.str;
      }
    }

    public helloVoid_args deepCopy() {
      return new helloVoid_args(this);
    }

    @Override
    public void clear() {
      this.str = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStr() {
      return this.str;
    }

    public helloVoid_args setStr(@org.apache.thrift.annotation.Nullable java.lang.String str) {
      this.str = str;
      return this;
    }

    public void unsetStr() {
      this.str = null;
    }

    /** Returns true if field str is set (has been assigned a value) and false otherwise */
    public boolean isSetStr() {
      return this.str != null;
    }

    public void setStrIsSet(boolean value) {
      if (!value) {
        this.str = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case STR:
        if (value == null) {
          unsetStr();
        } else {
          setStr((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR:
        return getStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR:
        return isSetStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof helloVoid_args)
        return this.equals((helloVoid_args)that);
      return false;
    }

    public boolean equals(helloVoid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_str = true && this.isSetStr();
      boolean that_present_str = true && that.isSetStr();
      if (this_present_str || that_present_str) {
        if (!(this_present_str && that_present_str))
          return false;
        if (!this.str.equals(that.str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStr()) ? 131071 : 524287);
      if (isSetStr())
        hashCode = hashCode * 8191 + str.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(helloVoid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("helloVoid_args(");
      boolean first = true;

      sb.append("str:");
      if (this.str == null) {
        sb.append("null");
      } else {
        sb.append(this.str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class helloVoid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public helloVoid_argsStandardScheme getScheme() {
        return new helloVoid_argsStandardScheme();
      }
    }

    private static class helloVoid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<helloVoid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, helloVoid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.str = iprot.readString();
                struct.setStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, helloVoid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.str != null) {
          oprot.writeFieldBegin(STR_FIELD_DESC);
          oprot.writeString(struct.str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class helloVoid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public helloVoid_argsTupleScheme getScheme() {
        return new helloVoid_argsTupleScheme();
      }
    }

    private static class helloVoid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<helloVoid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, helloVoid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStr()) {
          oprot.writeString(struct.str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, helloVoid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.str = iprot.readString();
          struct.setStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class helloVoid_result implements org.apache.thrift.TBase<helloVoid_result, helloVoid_result._Fields>, java.io.Serializable, Cloneable, Comparable<helloVoid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("helloVoid_result");

    private static final org.apache.thrift.protocol.TField HELLO_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("helloException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new helloVoid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new helloVoid_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.exception.HelloException helloException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HELLO_EXCEPTION((short)1, "helloException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HELLO_EXCEPTION
            return HELLO_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HELLO_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("helloException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, iot.github.timeway.thrift.api.exception.HelloException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(helloVoid_result.class, metaDataMap);
    }

    public helloVoid_result() {
    }

    public helloVoid_result(
      iot.github.timeway.thrift.api.exception.HelloException helloException)
    {
      this();
      this.helloException = helloException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public helloVoid_result(helloVoid_result other) {
      if (other.isSetHelloException()) {
        this.helloException = new iot.github.timeway.thrift.api.exception.HelloException(other.helloException);
      }
    }

    public helloVoid_result deepCopy() {
      return new helloVoid_result(this);
    }

    @Override
    public void clear() {
      this.helloException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public iot.github.timeway.thrift.api.exception.HelloException getHelloException() {
      return this.helloException;
    }

    public helloVoid_result setHelloException(@org.apache.thrift.annotation.Nullable iot.github.timeway.thrift.api.exception.HelloException helloException) {
      this.helloException = helloException;
      return this;
    }

    public void unsetHelloException() {
      this.helloException = null;
    }

    /** Returns true if field helloException is set (has been assigned a value) and false otherwise */
    public boolean isSetHelloException() {
      return this.helloException != null;
    }

    public void setHelloExceptionIsSet(boolean value) {
      if (!value) {
        this.helloException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HELLO_EXCEPTION:
        if (value == null) {
          unsetHelloException();
        } else {
          setHelloException((iot.github.timeway.thrift.api.exception.HelloException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HELLO_EXCEPTION:
        return getHelloException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HELLO_EXCEPTION:
        return isSetHelloException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof helloVoid_result)
        return this.equals((helloVoid_result)that);
      return false;
    }

    public boolean equals(helloVoid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_helloException = true && this.isSetHelloException();
      boolean that_present_helloException = true && that.isSetHelloException();
      if (this_present_helloException || that_present_helloException) {
        if (!(this_present_helloException && that_present_helloException))
          return false;
        if (!this.helloException.equals(that.helloException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHelloException()) ? 131071 : 524287);
      if (isSetHelloException())
        hashCode = hashCode * 8191 + helloException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(helloVoid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHelloException()).compareTo(other.isSetHelloException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHelloException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloException, other.helloException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("helloVoid_result(");
      boolean first = true;

      sb.append("helloException:");
      if (this.helloException == null) {
        sb.append("null");
      } else {
        sb.append(this.helloException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class helloVoid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public helloVoid_resultStandardScheme getScheme() {
        return new helloVoid_resultStandardScheme();
      }
    }

    private static class helloVoid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<helloVoid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, helloVoid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HELLO_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.helloException = new iot.github.timeway.thrift.api.exception.HelloException();
                struct.helloException.read(iprot);
                struct.setHelloExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, helloVoid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.helloException != null) {
          oprot.writeFieldBegin(HELLO_EXCEPTION_FIELD_DESC);
          struct.helloException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class helloVoid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public helloVoid_resultTupleScheme getScheme() {
        return new helloVoid_resultTupleScheme();
      }
    }

    private static class helloVoid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<helloVoid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, helloVoid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHelloException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHelloException()) {
          struct.helloException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, helloVoid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.helloException = new iot.github.timeway.thrift.api.exception.HelloException();
          struct.helloException.read(iprot);
          struct.setHelloExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
