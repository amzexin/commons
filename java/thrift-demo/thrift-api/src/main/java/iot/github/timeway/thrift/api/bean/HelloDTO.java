/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package iot.github.timeway.thrift.api.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2023-04-11")
public class HelloDTO implements org.apache.thrift.TBase<HelloDTO, HelloDTO._Fields>, java.io.Serializable, Cloneable, Comparable<HelloDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloDTO");

  private static final org.apache.thrift.protocol.TField HELLO_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("helloString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HELLO_I8_FIELD_DESC = new org.apache.thrift.protocol.TField("helloI8", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField HELLO_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("helloI16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField HELLO_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("helloI32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HELLO_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("helloI64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField HELLO_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("helloByte", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField HELLO_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("helloBool", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField HELLO_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("helloDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField HELLO_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("helloMap", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField HELLO_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("helloSet", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField HELLO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("helloList", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HelloDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HelloDTOTupleSchemeFactory();

  /**
   * 字符串类型
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String helloString; // required
  /**
   * 8位整形类型, 对应java中的byte类型
   */
  public byte helloI8; // required
  /**
   * 16位整形类型, 对应java中的short类型
   */
  public short helloI16; // required
  /**
   * 32位整形类型, 对应C/C++/java中的int类型
   */
  public int helloI32; // required
  /**
   * 64位整形类型, 对应C/C++/java中的long类型
   */
  public long helloI64; // required
  /**
   * 8位的字符类型，对应C/C++中的char，java中的byte类型
   */
  public byte helloByte; // required
  /**
   * 布尔类型，对应C/C++中的bool，java中的boolean类型
   */
  public boolean helloBool; // required
  /**
   * 双精度浮点类型，对应C/C++/java中的double类型
   */
  public double helloDouble; // required
  /**
   * map类型
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> helloMap; // required
  /**
   * set类型
   */
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> helloSet; // required
  /**
   * list类型
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> helloList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 字符串类型
     */
    HELLO_STRING((short)1, "helloString"),
    /**
     * 8位整形类型, 对应java中的byte类型
     */
    HELLO_I8((short)2, "helloI8"),
    /**
     * 16位整形类型, 对应java中的short类型
     */
    HELLO_I16((short)3, "helloI16"),
    /**
     * 32位整形类型, 对应C/C++/java中的int类型
     */
    HELLO_I32((short)4, "helloI32"),
    /**
     * 64位整形类型, 对应C/C++/java中的long类型
     */
    HELLO_I64((short)5, "helloI64"),
    /**
     * 8位的字符类型，对应C/C++中的char，java中的byte类型
     */
    HELLO_BYTE((short)6, "helloByte"),
    /**
     * 布尔类型，对应C/C++中的bool，java中的boolean类型
     */
    HELLO_BOOL((short)7, "helloBool"),
    /**
     * 双精度浮点类型，对应C/C++/java中的double类型
     */
    HELLO_DOUBLE((short)8, "helloDouble"),
    /**
     * map类型
     */
    HELLO_MAP((short)9, "helloMap"),
    /**
     * set类型
     */
    HELLO_SET((short)10, "helloSet"),
    /**
     * list类型
     */
    HELLO_LIST((short)11, "helloList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HELLO_STRING
          return HELLO_STRING;
        case 2: // HELLO_I8
          return HELLO_I8;
        case 3: // HELLO_I16
          return HELLO_I16;
        case 4: // HELLO_I32
          return HELLO_I32;
        case 5: // HELLO_I64
          return HELLO_I64;
        case 6: // HELLO_BYTE
          return HELLO_BYTE;
        case 7: // HELLO_BOOL
          return HELLO_BOOL;
        case 8: // HELLO_DOUBLE
          return HELLO_DOUBLE;
        case 9: // HELLO_MAP
          return HELLO_MAP;
        case 10: // HELLO_SET
          return HELLO_SET;
        case 11: // HELLO_LIST
          return HELLO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HELLOI8_ISSET_ID = 0;
  private static final int __HELLOI16_ISSET_ID = 1;
  private static final int __HELLOI32_ISSET_ID = 2;
  private static final int __HELLOI64_ISSET_ID = 3;
  private static final int __HELLOBYTE_ISSET_ID = 4;
  private static final int __HELLOBOOL_ISSET_ID = 5;
  private static final int __HELLODOUBLE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HELLO_STRING, new org.apache.thrift.meta_data.FieldMetaData("helloString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HELLO_I8, new org.apache.thrift.meta_data.FieldMetaData("helloI8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HELLO_I16, new org.apache.thrift.meta_data.FieldMetaData("helloI16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HELLO_I32, new org.apache.thrift.meta_data.FieldMetaData("helloI32", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HELLO_I64, new org.apache.thrift.meta_data.FieldMetaData("helloI64", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HELLO_BYTE, new org.apache.thrift.meta_data.FieldMetaData("helloByte", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HELLO_BOOL, new org.apache.thrift.meta_data.FieldMetaData("helloBool", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HELLO_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("helloDouble", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HELLO_MAP, new org.apache.thrift.meta_data.FieldMetaData("helloMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HELLO_SET, new org.apache.thrift.meta_data.FieldMetaData("helloSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HELLO_LIST, new org.apache.thrift.meta_data.FieldMetaData("helloList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloDTO.class, metaDataMap);
  }

  public HelloDTO() {
  }

  public HelloDTO(
    java.lang.String helloString,
    byte helloI8,
    short helloI16,
    int helloI32,
    long helloI64,
    byte helloByte,
    boolean helloBool,
    double helloDouble,
    java.util.Map<java.lang.Integer,java.lang.String> helloMap,
    java.util.Set<java.lang.Integer> helloSet,
    java.util.List<java.lang.Integer> helloList)
  {
    this();
    this.helloString = helloString;
    this.helloI8 = helloI8;
    setHelloI8IsSet(true);
    this.helloI16 = helloI16;
    setHelloI16IsSet(true);
    this.helloI32 = helloI32;
    setHelloI32IsSet(true);
    this.helloI64 = helloI64;
    setHelloI64IsSet(true);
    this.helloByte = helloByte;
    setHelloByteIsSet(true);
    this.helloBool = helloBool;
    setHelloBoolIsSet(true);
    this.helloDouble = helloDouble;
    setHelloDoubleIsSet(true);
    this.helloMap = helloMap;
    this.helloSet = helloSet;
    this.helloList = helloList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HelloDTO(HelloDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHelloString()) {
      this.helloString = other.helloString;
    }
    this.helloI8 = other.helloI8;
    this.helloI16 = other.helloI16;
    this.helloI32 = other.helloI32;
    this.helloI64 = other.helloI64;
    this.helloByte = other.helloByte;
    this.helloBool = other.helloBool;
    this.helloDouble = other.helloDouble;
    if (other.isSetHelloMap()) {
      java.util.Map<java.lang.Integer,java.lang.String> __this__helloMap = new java.util.HashMap<java.lang.Integer,java.lang.String>(other.helloMap);
      this.helloMap = __this__helloMap;
    }
    if (other.isSetHelloSet()) {
      java.util.Set<java.lang.Integer> __this__helloSet = new java.util.HashSet<java.lang.Integer>(other.helloSet);
      this.helloSet = __this__helloSet;
    }
    if (other.isSetHelloList()) {
      java.util.List<java.lang.Integer> __this__helloList = new java.util.ArrayList<java.lang.Integer>(other.helloList);
      this.helloList = __this__helloList;
    }
  }

  public HelloDTO deepCopy() {
    return new HelloDTO(this);
  }

  @Override
  public void clear() {
    this.helloString = null;
    setHelloI8IsSet(false);
    this.helloI8 = 0;
    setHelloI16IsSet(false);
    this.helloI16 = 0;
    setHelloI32IsSet(false);
    this.helloI32 = 0;
    setHelloI64IsSet(false);
    this.helloI64 = 0;
    setHelloByteIsSet(false);
    this.helloByte = 0;
    setHelloBoolIsSet(false);
    this.helloBool = false;
    setHelloDoubleIsSet(false);
    this.helloDouble = 0.0;
    this.helloMap = null;
    this.helloSet = null;
    this.helloList = null;
  }

  /**
   * 字符串类型
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHelloString() {
    return this.helloString;
  }

  /**
   * 字符串类型
   */
  public HelloDTO setHelloString(@org.apache.thrift.annotation.Nullable java.lang.String helloString) {
    this.helloString = helloString;
    return this;
  }

  public void unsetHelloString() {
    this.helloString = null;
  }

  /** Returns true if field helloString is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloString() {
    return this.helloString != null;
  }

  public void setHelloStringIsSet(boolean value) {
    if (!value) {
      this.helloString = null;
    }
  }

  /**
   * 8位整形类型, 对应java中的byte类型
   */
  public byte getHelloI8() {
    return this.helloI8;
  }

  /**
   * 8位整形类型, 对应java中的byte类型
   */
  public HelloDTO setHelloI8(byte helloI8) {
    this.helloI8 = helloI8;
    setHelloI8IsSet(true);
    return this;
  }

  public void unsetHelloI8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOI8_ISSET_ID);
  }

  /** Returns true if field helloI8 is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloI8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOI8_ISSET_ID);
  }

  public void setHelloI8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOI8_ISSET_ID, value);
  }

  /**
   * 16位整形类型, 对应java中的short类型
   */
  public short getHelloI16() {
    return this.helloI16;
  }

  /**
   * 16位整形类型, 对应java中的short类型
   */
  public HelloDTO setHelloI16(short helloI16) {
    this.helloI16 = helloI16;
    setHelloI16IsSet(true);
    return this;
  }

  public void unsetHelloI16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOI16_ISSET_ID);
  }

  /** Returns true if field helloI16 is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloI16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOI16_ISSET_ID);
  }

  public void setHelloI16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOI16_ISSET_ID, value);
  }

  /**
   * 32位整形类型, 对应C/C++/java中的int类型
   */
  public int getHelloI32() {
    return this.helloI32;
  }

  /**
   * 32位整形类型, 对应C/C++/java中的int类型
   */
  public HelloDTO setHelloI32(int helloI32) {
    this.helloI32 = helloI32;
    setHelloI32IsSet(true);
    return this;
  }

  public void unsetHelloI32() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOI32_ISSET_ID);
  }

  /** Returns true if field helloI32 is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloI32() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOI32_ISSET_ID);
  }

  public void setHelloI32IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOI32_ISSET_ID, value);
  }

  /**
   * 64位整形类型, 对应C/C++/java中的long类型
   */
  public long getHelloI64() {
    return this.helloI64;
  }

  /**
   * 64位整形类型, 对应C/C++/java中的long类型
   */
  public HelloDTO setHelloI64(long helloI64) {
    this.helloI64 = helloI64;
    setHelloI64IsSet(true);
    return this;
  }

  public void unsetHelloI64() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOI64_ISSET_ID);
  }

  /** Returns true if field helloI64 is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloI64() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOI64_ISSET_ID);
  }

  public void setHelloI64IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOI64_ISSET_ID, value);
  }

  /**
   * 8位的字符类型，对应C/C++中的char，java中的byte类型
   */
  public byte getHelloByte() {
    return this.helloByte;
  }

  /**
   * 8位的字符类型，对应C/C++中的char，java中的byte类型
   */
  public HelloDTO setHelloByte(byte helloByte) {
    this.helloByte = helloByte;
    setHelloByteIsSet(true);
    return this;
  }

  public void unsetHelloByte() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOBYTE_ISSET_ID);
  }

  /** Returns true if field helloByte is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloByte() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOBYTE_ISSET_ID);
  }

  public void setHelloByteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOBYTE_ISSET_ID, value);
  }

  /**
   * 布尔类型，对应C/C++中的bool，java中的boolean类型
   */
  public boolean isHelloBool() {
    return this.helloBool;
  }

  /**
   * 布尔类型，对应C/C++中的bool，java中的boolean类型
   */
  public HelloDTO setHelloBool(boolean helloBool) {
    this.helloBool = helloBool;
    setHelloBoolIsSet(true);
    return this;
  }

  public void unsetHelloBool() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLOBOOL_ISSET_ID);
  }

  /** Returns true if field helloBool is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloBool() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLOBOOL_ISSET_ID);
  }

  public void setHelloBoolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLOBOOL_ISSET_ID, value);
  }

  /**
   * 双精度浮点类型，对应C/C++/java中的double类型
   */
  public double getHelloDouble() {
    return this.helloDouble;
  }

  /**
   * 双精度浮点类型，对应C/C++/java中的double类型
   */
  public HelloDTO setHelloDouble(double helloDouble) {
    this.helloDouble = helloDouble;
    setHelloDoubleIsSet(true);
    return this;
  }

  public void unsetHelloDouble() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HELLODOUBLE_ISSET_ID);
  }

  /** Returns true if field helloDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloDouble() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HELLODOUBLE_ISSET_ID);
  }

  public void setHelloDoubleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HELLODOUBLE_ISSET_ID, value);
  }

  public int getHelloMapSize() {
    return (this.helloMap == null) ? 0 : this.helloMap.size();
  }

  public void putToHelloMap(int key, java.lang.String val) {
    if (this.helloMap == null) {
      this.helloMap = new java.util.HashMap<java.lang.Integer,java.lang.String>();
    }
    this.helloMap.put(key, val);
  }

  /**
   * map类型
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.String> getHelloMap() {
    return this.helloMap;
  }

  /**
   * map类型
   */
  public HelloDTO setHelloMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> helloMap) {
    this.helloMap = helloMap;
    return this;
  }

  public void unsetHelloMap() {
    this.helloMap = null;
  }

  /** Returns true if field helloMap is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloMap() {
    return this.helloMap != null;
  }

  public void setHelloMapIsSet(boolean value) {
    if (!value) {
      this.helloMap = null;
    }
  }

  public int getHelloSetSize() {
    return (this.helloSet == null) ? 0 : this.helloSet.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getHelloSetIterator() {
    return (this.helloSet == null) ? null : this.helloSet.iterator();
  }

  public void addToHelloSet(int elem) {
    if (this.helloSet == null) {
      this.helloSet = new java.util.HashSet<java.lang.Integer>();
    }
    this.helloSet.add(elem);
  }

  /**
   * set类型
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getHelloSet() {
    return this.helloSet;
  }

  /**
   * set类型
   */
  public HelloDTO setHelloSet(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> helloSet) {
    this.helloSet = helloSet;
    return this;
  }

  public void unsetHelloSet() {
    this.helloSet = null;
  }

  /** Returns true if field helloSet is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloSet() {
    return this.helloSet != null;
  }

  public void setHelloSetIsSet(boolean value) {
    if (!value) {
      this.helloSet = null;
    }
  }

  public int getHelloListSize() {
    return (this.helloList == null) ? 0 : this.helloList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getHelloListIterator() {
    return (this.helloList == null) ? null : this.helloList.iterator();
  }

  public void addToHelloList(int elem) {
    if (this.helloList == null) {
      this.helloList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.helloList.add(elem);
  }

  /**
   * list类型
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getHelloList() {
    return this.helloList;
  }

  /**
   * list类型
   */
  public HelloDTO setHelloList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> helloList) {
    this.helloList = helloList;
    return this;
  }

  public void unsetHelloList() {
    this.helloList = null;
  }

  /** Returns true if field helloList is set (has been assigned a value) and false otherwise */
  public boolean isSetHelloList() {
    return this.helloList != null;
  }

  public void setHelloListIsSet(boolean value) {
    if (!value) {
      this.helloList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HELLO_STRING:
      if (value == null) {
        unsetHelloString();
      } else {
        setHelloString((java.lang.String)value);
      }
      break;

    case HELLO_I8:
      if (value == null) {
        unsetHelloI8();
      } else {
        setHelloI8((java.lang.Byte)value);
      }
      break;

    case HELLO_I16:
      if (value == null) {
        unsetHelloI16();
      } else {
        setHelloI16((java.lang.Short)value);
      }
      break;

    case HELLO_I32:
      if (value == null) {
        unsetHelloI32();
      } else {
        setHelloI32((java.lang.Integer)value);
      }
      break;

    case HELLO_I64:
      if (value == null) {
        unsetHelloI64();
      } else {
        setHelloI64((java.lang.Long)value);
      }
      break;

    case HELLO_BYTE:
      if (value == null) {
        unsetHelloByte();
      } else {
        setHelloByte((java.lang.Byte)value);
      }
      break;

    case HELLO_BOOL:
      if (value == null) {
        unsetHelloBool();
      } else {
        setHelloBool((java.lang.Boolean)value);
      }
      break;

    case HELLO_DOUBLE:
      if (value == null) {
        unsetHelloDouble();
      } else {
        setHelloDouble((java.lang.Double)value);
      }
      break;

    case HELLO_MAP:
      if (value == null) {
        unsetHelloMap();
      } else {
        setHelloMap((java.util.Map<java.lang.Integer,java.lang.String>)value);
      }
      break;

    case HELLO_SET:
      if (value == null) {
        unsetHelloSet();
      } else {
        setHelloSet((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case HELLO_LIST:
      if (value == null) {
        unsetHelloList();
      } else {
        setHelloList((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HELLO_STRING:
      return getHelloString();

    case HELLO_I8:
      return getHelloI8();

    case HELLO_I16:
      return getHelloI16();

    case HELLO_I32:
      return getHelloI32();

    case HELLO_I64:
      return getHelloI64();

    case HELLO_BYTE:
      return getHelloByte();

    case HELLO_BOOL:
      return isHelloBool();

    case HELLO_DOUBLE:
      return getHelloDouble();

    case HELLO_MAP:
      return getHelloMap();

    case HELLO_SET:
      return getHelloSet();

    case HELLO_LIST:
      return getHelloList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HELLO_STRING:
      return isSetHelloString();
    case HELLO_I8:
      return isSetHelloI8();
    case HELLO_I16:
      return isSetHelloI16();
    case HELLO_I32:
      return isSetHelloI32();
    case HELLO_I64:
      return isSetHelloI64();
    case HELLO_BYTE:
      return isSetHelloByte();
    case HELLO_BOOL:
      return isSetHelloBool();
    case HELLO_DOUBLE:
      return isSetHelloDouble();
    case HELLO_MAP:
      return isSetHelloMap();
    case HELLO_SET:
      return isSetHelloSet();
    case HELLO_LIST:
      return isSetHelloList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HelloDTO)
      return this.equals((HelloDTO)that);
    return false;
  }

  public boolean equals(HelloDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_helloString = true && this.isSetHelloString();
    boolean that_present_helloString = true && that.isSetHelloString();
    if (this_present_helloString || that_present_helloString) {
      if (!(this_present_helloString && that_present_helloString))
        return false;
      if (!this.helloString.equals(that.helloString))
        return false;
    }

    boolean this_present_helloI8 = true;
    boolean that_present_helloI8 = true;
    if (this_present_helloI8 || that_present_helloI8) {
      if (!(this_present_helloI8 && that_present_helloI8))
        return false;
      if (this.helloI8 != that.helloI8)
        return false;
    }

    boolean this_present_helloI16 = true;
    boolean that_present_helloI16 = true;
    if (this_present_helloI16 || that_present_helloI16) {
      if (!(this_present_helloI16 && that_present_helloI16))
        return false;
      if (this.helloI16 != that.helloI16)
        return false;
    }

    boolean this_present_helloI32 = true;
    boolean that_present_helloI32 = true;
    if (this_present_helloI32 || that_present_helloI32) {
      if (!(this_present_helloI32 && that_present_helloI32))
        return false;
      if (this.helloI32 != that.helloI32)
        return false;
    }

    boolean this_present_helloI64 = true;
    boolean that_present_helloI64 = true;
    if (this_present_helloI64 || that_present_helloI64) {
      if (!(this_present_helloI64 && that_present_helloI64))
        return false;
      if (this.helloI64 != that.helloI64)
        return false;
    }

    boolean this_present_helloByte = true;
    boolean that_present_helloByte = true;
    if (this_present_helloByte || that_present_helloByte) {
      if (!(this_present_helloByte && that_present_helloByte))
        return false;
      if (this.helloByte != that.helloByte)
        return false;
    }

    boolean this_present_helloBool = true;
    boolean that_present_helloBool = true;
    if (this_present_helloBool || that_present_helloBool) {
      if (!(this_present_helloBool && that_present_helloBool))
        return false;
      if (this.helloBool != that.helloBool)
        return false;
    }

    boolean this_present_helloDouble = true;
    boolean that_present_helloDouble = true;
    if (this_present_helloDouble || that_present_helloDouble) {
      if (!(this_present_helloDouble && that_present_helloDouble))
        return false;
      if (this.helloDouble != that.helloDouble)
        return false;
    }

    boolean this_present_helloMap = true && this.isSetHelloMap();
    boolean that_present_helloMap = true && that.isSetHelloMap();
    if (this_present_helloMap || that_present_helloMap) {
      if (!(this_present_helloMap && that_present_helloMap))
        return false;
      if (!this.helloMap.equals(that.helloMap))
        return false;
    }

    boolean this_present_helloSet = true && this.isSetHelloSet();
    boolean that_present_helloSet = true && that.isSetHelloSet();
    if (this_present_helloSet || that_present_helloSet) {
      if (!(this_present_helloSet && that_present_helloSet))
        return false;
      if (!this.helloSet.equals(that.helloSet))
        return false;
    }

    boolean this_present_helloList = true && this.isSetHelloList();
    boolean that_present_helloList = true && that.isSetHelloList();
    if (this_present_helloList || that_present_helloList) {
      if (!(this_present_helloList && that_present_helloList))
        return false;
      if (!this.helloList.equals(that.helloList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHelloString()) ? 131071 : 524287);
    if (isSetHelloString())
      hashCode = hashCode * 8191 + helloString.hashCode();

    hashCode = hashCode * 8191 + (int) (helloI8);

    hashCode = hashCode * 8191 + helloI16;

    hashCode = hashCode * 8191 + helloI32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(helloI64);

    hashCode = hashCode * 8191 + (int) (helloByte);

    hashCode = hashCode * 8191 + ((helloBool) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(helloDouble);

    hashCode = hashCode * 8191 + ((isSetHelloMap()) ? 131071 : 524287);
    if (isSetHelloMap())
      hashCode = hashCode * 8191 + helloMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetHelloSet()) ? 131071 : 524287);
    if (isSetHelloSet())
      hashCode = hashCode * 8191 + helloSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetHelloList()) ? 131071 : 524287);
    if (isSetHelloList())
      hashCode = hashCode * 8191 + helloList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HelloDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHelloString()).compareTo(other.isSetHelloString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloString, other.helloString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloI8()).compareTo(other.isSetHelloI8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloI8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloI8, other.helloI8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloI16()).compareTo(other.isSetHelloI16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloI16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloI16, other.helloI16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloI32()).compareTo(other.isSetHelloI32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloI32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloI32, other.helloI32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloI64()).compareTo(other.isSetHelloI64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloI64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloI64, other.helloI64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloByte()).compareTo(other.isSetHelloByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloByte, other.helloByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloBool()).compareTo(other.isSetHelloBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloBool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloBool, other.helloBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloDouble()).compareTo(other.isSetHelloDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloDouble, other.helloDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloMap()).compareTo(other.isSetHelloMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloMap, other.helloMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloSet()).compareTo(other.isSetHelloSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloSet, other.helloSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHelloList()).compareTo(other.isSetHelloList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHelloList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.helloList, other.helloList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HelloDTO(");
    boolean first = true;

    sb.append("helloString:");
    if (this.helloString == null) {
      sb.append("null");
    } else {
      sb.append(this.helloString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloI8:");
    sb.append(this.helloI8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloI16:");
    sb.append(this.helloI16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloI32:");
    sb.append(this.helloI32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloI64:");
    sb.append(this.helloI64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloByte:");
    sb.append(this.helloByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloBool:");
    sb.append(this.helloBool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloDouble:");
    sb.append(this.helloDouble);
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloMap:");
    if (this.helloMap == null) {
      sb.append("null");
    } else {
      sb.append(this.helloMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloSet:");
    if (this.helloSet == null) {
      sb.append("null");
    } else {
      sb.append(this.helloSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("helloList:");
    if (this.helloList == null) {
      sb.append("null");
    } else {
      sb.append(this.helloList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (helloString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloString' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'helloI8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloI16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloI32' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloI64' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloByte' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloBool' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'helloDouble' because it's a primitive and you chose the non-beans generator.
    if (helloMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloMap' was not present! Struct: " + toString());
    }
    if (helloSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloSet' was not present! Struct: " + toString());
    }
    if (helloList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HelloDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HelloDTOStandardScheme getScheme() {
      return new HelloDTOStandardScheme();
    }
  }

  private static class HelloDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HelloDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HelloDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HELLO_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.helloString = iprot.readString();
              struct.setHelloStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HELLO_I8
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.helloI8 = iprot.readByte();
              struct.setHelloI8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HELLO_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.helloI16 = iprot.readI16();
              struct.setHelloI16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HELLO_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.helloI32 = iprot.readI32();
              struct.setHelloI32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HELLO_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.helloI64 = iprot.readI64();
              struct.setHelloI64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HELLO_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.helloByte = iprot.readByte();
              struct.setHelloByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HELLO_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.helloBool = iprot.readBool();
              struct.setHelloBoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HELLO_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.helloDouble = iprot.readDouble();
              struct.setHelloDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HELLO_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.helloMap = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map0.size);
                int _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readString();
                  struct.helloMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setHelloMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HELLO_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.helloSet = new java.util.HashSet<java.lang.Integer>(2*_set4.size);
                int _elem5;
                for (int _i6 = 0; _i6 < _set4.size; ++_i6)
                {
                  _elem5 = iprot.readI32();
                  struct.helloSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setHelloSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HELLO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.helloList = new java.util.ArrayList<java.lang.Integer>(_list7.size);
                int _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readI32();
                  struct.helloList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setHelloListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHelloI8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloI8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloI16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloI16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloI32()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloI32' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloI64()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloI64' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloByte()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloByte' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloBool()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloBool' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHelloDouble()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'helloDouble' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HelloDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.helloString != null) {
        oprot.writeFieldBegin(HELLO_STRING_FIELD_DESC);
        oprot.writeString(struct.helloString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HELLO_I8_FIELD_DESC);
      oprot.writeByte(struct.helloI8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_I16_FIELD_DESC);
      oprot.writeI16(struct.helloI16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_I32_FIELD_DESC);
      oprot.writeI32(struct.helloI32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_I64_FIELD_DESC);
      oprot.writeI64(struct.helloI64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_BYTE_FIELD_DESC);
      oprot.writeByte(struct.helloByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_BOOL_FIELD_DESC);
      oprot.writeBool(struct.helloBool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HELLO_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.helloDouble);
      oprot.writeFieldEnd();
      if (struct.helloMap != null) {
        oprot.writeFieldBegin(HELLO_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.helloMap.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter10 : struct.helloMap.entrySet())
          {
            oprot.writeI32(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.helloSet != null) {
        oprot.writeFieldBegin(HELLO_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.helloSet.size()));
          for (int _iter11 : struct.helloSet)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.helloList != null) {
        oprot.writeFieldBegin(HELLO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.helloList.size()));
          for (int _iter12 : struct.helloList)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HelloDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HelloDTOTupleScheme getScheme() {
      return new HelloDTOTupleScheme();
    }
  }

  private static class HelloDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HelloDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HelloDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.helloString);
      oprot.writeByte(struct.helloI8);
      oprot.writeI16(struct.helloI16);
      oprot.writeI32(struct.helloI32);
      oprot.writeI64(struct.helloI64);
      oprot.writeByte(struct.helloByte);
      oprot.writeBool(struct.helloBool);
      oprot.writeDouble(struct.helloDouble);
      {
        oprot.writeI32(struct.helloMap.size());
        for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter13 : struct.helloMap.entrySet())
        {
          oprot.writeI32(_iter13.getKey());
          oprot.writeString(_iter13.getValue());
        }
      }
      {
        oprot.writeI32(struct.helloSet.size());
        for (int _iter14 : struct.helloSet)
        {
          oprot.writeI32(_iter14);
        }
      }
      {
        oprot.writeI32(struct.helloList.size());
        for (int _iter15 : struct.helloList)
        {
          oprot.writeI32(_iter15);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HelloDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.helloString = iprot.readString();
      struct.setHelloStringIsSet(true);
      struct.helloI8 = iprot.readByte();
      struct.setHelloI8IsSet(true);
      struct.helloI16 = iprot.readI16();
      struct.setHelloI16IsSet(true);
      struct.helloI32 = iprot.readI32();
      struct.setHelloI32IsSet(true);
      struct.helloI64 = iprot.readI64();
      struct.setHelloI64IsSet(true);
      struct.helloByte = iprot.readByte();
      struct.setHelloByteIsSet(true);
      struct.helloBool = iprot.readBool();
      struct.setHelloBoolIsSet(true);
      struct.helloDouble = iprot.readDouble();
      struct.setHelloDoubleIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.helloMap = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map16.size);
        int _key17;
        @org.apache.thrift.annotation.Nullable java.lang.String _val18;
        for (int _i19 = 0; _i19 < _map16.size; ++_i19)
        {
          _key17 = iprot.readI32();
          _val18 = iprot.readString();
          struct.helloMap.put(_key17, _val18);
        }
      }
      struct.setHelloMapIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.helloSet = new java.util.HashSet<java.lang.Integer>(2*_set20.size);
        int _elem21;
        for (int _i22 = 0; _i22 < _set20.size; ++_i22)
        {
          _elem21 = iprot.readI32();
          struct.helloSet.add(_elem21);
        }
      }
      struct.setHelloSetIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.helloList = new java.util.ArrayList<java.lang.Integer>(_list23.size);
        int _elem24;
        for (int _i25 = 0; _i25 < _list23.size; ++_i25)
        {
          _elem24 = iprot.readI32();
          struct.helloList.add(_elem24);
        }
      }
      struct.setHelloListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

